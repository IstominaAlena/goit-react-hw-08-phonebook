{"version":3,"sources":["pages/SignupPage/SignupPage.jsx","../node_modules/nanoid/index.browser.js","shared/components/Input/Input.jsx","shared/functions/onFormFn.js","shared/components/Input/Input.module.css","pages/SignupPage/SignupPage.module.css"],"names":["SignupPage","dispatch","useDispatch","className","s","title","form","onSubmit","e","preventDefault","signupData","dataCapture","name","email","password","alert","signupUser","resetForm","id","Input","labelName","type","pattern","placeholderValue","minLength","maxLength","Button","text","props","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","value","onChange","styles","filterComponent","formComponent","htmlFor","formLabel","formInput","placeholder","defaultProps","undefined","formElements","FormData","currentTarget","obj","forEach","document","querySelector","querySelectorAll","input","module","exports"],"mappings":"kQAwDeA,EA9CI,WACjB,IAAMC,EAAWC,cAgBjB,OACE,qCACE,oBAAIC,UAAWC,IAAEC,MAAjB,0BACA,uBAAMF,UAAWC,IAAEE,KAAMC,SAjB7B,SAAsBC,GACpBA,EAAEC,iBAEF,IAAMC,EAAaC,YAAYH,GAEvBI,EAA0BF,EAA1BE,KAAMC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SAErB,IAAKF,IAASC,IAAUC,EACtB,OAAOC,MAAM,wBAEfd,EAASe,YAAWN,IACpBO,YAAU,eAMyCC,GAAG,aAApD,UACE,cAACC,EAAA,EAAD,CACEC,UAAU,OACVC,KAAK,OACLT,KAAK,OACLU,QAAQ,yHACRjB,MAAM,yIACNkB,iBAAiB,aAGnB,cAACJ,EAAA,EAAD,CAAOC,UAAU,QAAQC,KAAK,QAAQT,KAAK,QAAQW,iBAAiB,qBAEpE,cAACJ,EAAA,EAAD,CACEC,UAAU,WACVC,KAAK,WACLT,KAAK,WACLY,UAAU,IACVC,UAAU,KACVF,iBAAiB,cAGnB,cAACG,EAAA,EAAD,CAAQL,KAAK,SAASM,KAAK,mB,kECxBnC,I,wBCvBMR,EAAQ,SAAAS,GACZ,IAAMV,EDuCK,WAGX,IAH0B,IAAdW,EAAc,uDAAP,GACfX,EAAK,GACLY,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfX,GADEgB,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOhB,ECtDImB,GACHjB,EAA6EQ,EAA7ER,UAAWkB,EAAkEV,EAAlEU,MAAOC,EAA2DX,EAA3DW,SAAUlB,EAAiDO,EAAjDP,KAAMT,EAA2CgB,EAA3ChB,KAAMU,EAAqCM,EAArCN,QAASjB,EAA4BuB,EAA5BvB,MAAOkB,EAAqBK,EAArBL,iBAEhE,OACE,sBAAKpB,UAAoB,WAATS,EAAoB4B,IAAOC,gBAAkBD,IAAOE,cAApE,UACE,wBAAOC,QAASzB,EAAIf,UAAWqC,IAAOI,UAAtC,UACGxB,EADH,OAGA,uBACEjB,UAAWqC,IAAOK,UAClB3B,GAAIA,EACJoB,MAAOA,EACPC,SAAUA,EACVlB,KAAMA,EACNT,KAAMA,EACNU,QAASA,EACTjB,MAAOA,EACPyC,YAAavB,QAMNJ,IAEfA,EAAM4B,aAAe,CACnB1B,KAAM,OACNyB,iBAAaE,I,gCChCR,SAASrC,EAAYH,GAC1B,IAAMyC,EAAe,IAAIC,SAAS1C,EAAE2C,eAC9BC,EAAM,GAIZ,OAFAH,EAAaI,SAAQ,SAACf,EAAO1B,GAAR,OAAkBwC,EAAIxC,GAAQ0B,KAE5Cc,EAGF,SAASnC,EAAUC,GACXoC,SAASC,cAAT,WAA2BrC,IACpBsC,iBAAiB,SAE9BH,SAAQ,SAAAI,GAAK,OAAKA,EAAMnB,MAAQ,MAbzC,qE,mBCCAoB,EAAOC,QAAU,CAAC,cAAgB,6BAA6B,gBAAkB,+BAA+B,UAAY,yBAAyB,UAAY,2B,mBCAjKD,EAAOC,QAAU,CAAC,MAAQ,0BAA0B,KAAO,yBAAyB,KAAO","file":"static/js/signup-page.dfe6b151.chunk.js","sourcesContent":["import { useDispatch } from 'react-redux';\r\n\r\nimport { dataCapture, resetForm } from '../../shared/functions/onFormFn';\r\nimport { signupUser } from '../../redux/auth/authOperations';\r\n\r\nimport Input from '../../shared/components/Input';\r\nimport Button from '../../shared/components/Button';\r\n\r\nimport s from './SignupPage.module.css';\r\n\r\nconst SignupPage = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const signupData = dataCapture(e);\r\n\r\n    const { name, email, password } = signupData;\r\n\r\n    if (!name || !email || !password) {\r\n      return alert('Please fill the form');\r\n    }\r\n    dispatch(signupUser(signupData));\r\n    resetForm('signupForm');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h3 className={s.title}>Registration</h3>\r\n      <form className={s.form} onSubmit={handleSubmit} id=\"signupForm\">\r\n        <Input\r\n          labelName=\"Name\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          placeholderValue=\"Jane Doe\"\r\n        />\r\n\r\n        <Input labelName=\"Email\" type=\"email\" name=\"email\" placeholderValue=\"example@mail.com\" />\r\n\r\n        <Input\r\n          labelName=\"Password\"\r\n          type=\"password\"\r\n          name=\"password\"\r\n          minLength=\"7\"\r\n          maxLength=\"20\"\r\n          placeholderValue=\"*********\"\r\n        />\r\n\r\n        <Button type=\"submit\" text=\"Signup\" />\r\n      </form>\r\n    </>\r\n  );\r\n};\r\nexport default SignupPage;\r\n","import { urlAlphabet } from './url-alphabet/index.js'\nif (process.env.NODE_ENV !== 'production') {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\nimport styles from './Input.module.css';\r\n\r\nconst Input = props => {\r\n  const id = nanoid();\r\n  const { labelName, value, onChange, type, name, pattern, title, placeholderValue } = props;\r\n\r\n  return (\r\n    <div className={name === 'filter' ? styles.filterComponent : styles.formComponent}>\r\n      <label htmlFor={id} className={styles.formLabel}>\r\n        {labelName}:\r\n      </label>\r\n      <input\r\n        className={styles.formInput}\r\n        id={id}\r\n        value={value}\r\n        onChange={onChange}\r\n        type={type}\r\n        name={name}\r\n        pattern={pattern}\r\n        title={title}\r\n        placeholder={placeholderValue}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n\r\nInput.defaultProps = {\r\n  type: 'text',\r\n  placeholder: undefined,\r\n};\r\n\r\nInput.propTypes = {\r\n  labelName: PropTypes.string,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  type: PropTypes.string,\r\n  name: PropTypes.string,\r\n  pattern: PropTypes.string,\r\n  title: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n};\r\n","export function dataCapture(e) {\r\n  const formElements = new FormData(e.currentTarget);\r\n  const obj = {};\r\n\r\n  formElements.forEach((value, name) => (obj[name] = value));\r\n\r\n  return obj;\r\n}\r\n\r\nexport function resetForm(id) {\r\n  const form = document.querySelector(`#${id}`);\r\n  const inputs = form.querySelectorAll('input');\r\n\r\n  inputs.forEach(input => (input.value = ''));\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formComponent\":\"Input_formComponent__3oLmR\",\"filterComponent\":\"Input_filterComponent__3Aah-\",\"formLabel\":\"Input_formLabel__3N9O3\",\"formInput\":\"Input_formInput__3gIDN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"SignupPage_title__3pGEB\",\"form\":\"SignupPage_form__3Wud-\",\"link\":\"SignupPage_link__1mWVi\"};"],"sourceRoot":""}