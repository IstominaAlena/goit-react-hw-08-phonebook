{"version":3,"sources":["pages/LoginPage/LoginPage.jsx","../node_modules/nanoid/index.browser.js","shared/components/Input/Input.jsx","shared/functions/onFormFn.js","shared/components/Input/Input.module.css","pages/LoginPage/LoginPage.module.css"],"names":["LoginPage","dispatch","useDispatch","className","s","title","form","onSubmit","e","preventDefault","loginData","dataCapture","email","password","alert","loginUser","resetForm","id","Input","labelName","type","name","placeholderValue","minLength","maxLength","Button","text","to","link","activeclassname","active","props","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","value","onChange","pattern","styles","filterComponent","formComponent","htmlFor","formLabel","formInput","placeholder","defaultProps","undefined","formElements","FormData","currentTarget","obj","forEach","document","querySelector","querySelectorAll","input","module","exports"],"mappings":"0QAkDeA,EAzCG,WAChB,IAAMC,EAAWC,cAgBjB,OACE,qCACE,oBAAIC,UAAWC,IAAEC,MAAjB,2BACA,uBAAMF,UAAWC,IAAEE,KAAMC,SAjB7B,SAAsBC,GACpBA,EAAEC,iBAEF,IAAMC,EAAYC,YAAYH,GAEtBI,EAAoBF,EAApBE,MAAOC,EAAaH,EAAbG,SAEf,IAAKD,IAAUC,EACb,OAAOC,MAAM,wBAGfb,EAASc,YAAUL,IACnBM,YAAU,cAKyCC,GAAG,YAApD,UACE,cAACC,EAAA,EAAD,CAAOC,UAAU,QAAQC,KAAK,QAAQC,KAAK,QAAQC,iBAAiB,qBAEpE,cAACJ,EAAA,EAAD,CACEC,UAAU,WACVC,KAAK,WACLC,KAAK,WACLE,UAAU,IACVC,UAAU,KACVF,iBAAiB,cAGnB,cAACG,EAAA,EAAD,CAAQL,KAAK,SAASM,KAAK,aAG7B,cAAC,IAAD,CAAMC,GAAG,UAAUxB,UAAWC,IAAEwB,KAAMC,gBAAiBzB,IAAE0B,OAAzD,yB,kECjBN,I,wBCvBMZ,EAAQ,SAAAa,GACZ,IAAMd,EDuCK,WAGX,IAH0B,IAAde,EAAc,uDAAP,GACff,EAAK,GACLgB,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEff,GADEoB,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOpB,ECtDIuB,GACHrB,EAA6EY,EAA7EZ,UAAWsB,EAAkEV,EAAlEU,MAAOC,EAA2DX,EAA3DW,SAAUtB,EAAiDW,EAAjDX,KAAMC,EAA2CU,EAA3CV,KAAMsB,EAAqCZ,EAArCY,QAAStC,EAA4B0B,EAA5B1B,MAAOiB,EAAqBS,EAArBT,iBAEhE,OACE,sBAAKnB,UAAoB,WAATkB,EAAoBuB,IAAOC,gBAAkBD,IAAOE,cAApE,UACE,wBAAOC,QAAS9B,EAAId,UAAWyC,IAAOI,UAAtC,UACG7B,EADH,OAGA,uBACEhB,UAAWyC,IAAOK,UAClBhC,GAAIA,EACJwB,MAAOA,EACPC,SAAUA,EACVtB,KAAMA,EACNC,KAAMA,EACNsB,QAASA,EACTtC,MAAOA,EACP6C,YAAa5B,QAMNJ,IAEfA,EAAMiC,aAAe,CACnB/B,KAAM,OACN8B,iBAAaE,I,gCChCR,SAASzC,EAAYH,GAC1B,IAAM6C,EAAe,IAAIC,SAAS9C,EAAE+C,eAC9BC,EAAM,GAIZ,OAFAH,EAAaI,SAAQ,SAAChB,EAAOpB,GAAR,OAAkBmC,EAAInC,GAAQoB,KAE5Ce,EAGF,SAASxC,EAAUC,GACXyC,SAASC,cAAT,WAA2B1C,IACpB2C,iBAAiB,SAE9BH,SAAQ,SAAAI,GAAK,OAAKA,EAAMpB,MAAQ,MAbzC,qE,mBCCAqB,EAAOC,QAAU,CAAC,cAAgB,6BAA6B,gBAAkB,+BAA+B,UAAY,yBAAyB,UAAY,2B,mBCAjKD,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,KAAO,wBAAwB,KAAO","file":"static/js/login-page.3509e43e.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { dataCapture, resetForm } from '../../shared/functions/onFormFn';\r\nimport { loginUser } from '../../redux/auth/authOperations';\r\n\r\nimport Input from '../../shared/components/Input';\r\nimport Button from '../../shared/components/Button';\r\nimport s from './LoginPage.module.css';\r\nconst LoginPage = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const loginData = dataCapture(e);\r\n\r\n    const { email, password } = loginData;\r\n\r\n    if (!email || !password) {\r\n      return alert('Please fill the form');\r\n    }\r\n\r\n    dispatch(loginUser(loginData));\r\n    resetForm('loginForm');\r\n  }\r\n  return (\r\n    <>\r\n      <h3 className={s.title}>Authorization</h3>\r\n      <form className={s.form} onSubmit={handleSubmit} id=\"loginForm\">\r\n        <Input labelName=\"Email\" type=\"email\" name=\"email\" placeholderValue=\"example@mail.com\" />\r\n\r\n        <Input\r\n          labelName=\"Password\"\r\n          type=\"password\"\r\n          name=\"password\"\r\n          minLength=\"7\"\r\n          maxLength=\"20\"\r\n          placeholderValue=\"*********\"\r\n        />\r\n\r\n        <Button type=\"submit\" text=\"Login\" />\r\n      </form>\r\n\r\n      <Link to=\"/signup\" className={s.link} activeclassname={s.active}>\r\n        Signup\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\nexport default LoginPage;\r\n","import { urlAlphabet } from './url-alphabet/index.js'\nif (process.env.NODE_ENV !== 'production') {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\nimport styles from './Input.module.css';\r\n\r\nconst Input = props => {\r\n  const id = nanoid();\r\n  const { labelName, value, onChange, type, name, pattern, title, placeholderValue } = props;\r\n\r\n  return (\r\n    <div className={name === 'filter' ? styles.filterComponent : styles.formComponent}>\r\n      <label htmlFor={id} className={styles.formLabel}>\r\n        {labelName}:\r\n      </label>\r\n      <input\r\n        className={styles.formInput}\r\n        id={id}\r\n        value={value}\r\n        onChange={onChange}\r\n        type={type}\r\n        name={name}\r\n        pattern={pattern}\r\n        title={title}\r\n        placeholder={placeholderValue}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n\r\nInput.defaultProps = {\r\n  type: 'text',\r\n  placeholder: undefined,\r\n};\r\n\r\nInput.propTypes = {\r\n  labelName: PropTypes.string,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  type: PropTypes.string,\r\n  name: PropTypes.string,\r\n  pattern: PropTypes.string,\r\n  title: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n};\r\n","export function dataCapture(e) {\r\n  const formElements = new FormData(e.currentTarget);\r\n  const obj = {};\r\n\r\n  formElements.forEach((value, name) => (obj[name] = value));\r\n\r\n  return obj;\r\n}\r\n\r\nexport function resetForm(id) {\r\n  const form = document.querySelector(`#${id}`);\r\n  const inputs = form.querySelectorAll('input');\r\n\r\n  inputs.forEach(input => (input.value = ''));\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formComponent\":\"Input_formComponent__3oLmR\",\"filterComponent\":\"Input_filterComponent__3Aah-\",\"formLabel\":\"Input_formLabel__3N9O3\",\"formInput\":\"Input_formInput__3gIDN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"LoginPage_title__1Bqnn\",\"form\":\"LoginPage_form__3bAVJ\",\"link\":\"LoginPage_link__lWsdq\"};"],"sourceRoot":""}